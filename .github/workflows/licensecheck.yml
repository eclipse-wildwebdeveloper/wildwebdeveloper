# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: License check

on:
  push:
    branches: 
      - 'master'
  pull_request:
    branches: 
     - 'master'
  issue_comment:
    types: [created]
    
jobs:
  call-mvn-license-check:
    uses: eclipse/dash-licenses/.github/workflows/mavenLicenseCheck.yml@master
    with:
      projectId: tools.wildwebdeveloper
    secrets:
      gitlabAPIToken: ${{ secrets.GITLAB_API_TOKEN }}
  npm-check:
    if: github.event_name != 'issue_comment' || ( github.event.issue.pull_request != '' && (github.event.comment.body == '/request-license-review') )
    # Run on all non-comment events specified by the calling workflow and for comments on PRs that have a corresponding body.
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Cache local Maven repository
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Prepare NPM deps
      run: mvn -DskipTests -pl target-platform,org.eclipse.wildwebdeveloper.embedder.node,org.eclipse.wildwebdeveloper package
    - name: Get Dash license tool
      run: |
        mvn -U dependency:get -Dartifact=org.eclipse.dash:org.eclipse.dash.licenses:0.0.1-SNAPSHOT
        mkdir -p target/dash         # Make directory for dash-license review summary 
    - name: Set request review parameters
      if: github.event_name == 'issue_comment'
      run: |
        echo "request-review=1" >> $GITHUB_ENV
      # Run only for comments on PRs that have a corresponding body.
    - name:  NPM Deps License check
      shell: bash {0}
      run: |
        set +x

        savePWD=$PWD
        mkdir -p target/dash         # Make directory for dash-license review summary 

        projectId="tools.wildwebdeveloper"
        gitlabAPIToken="${{ secrets.GITLAB_API_TOKEN }}"
        dashLicenseToolJar=$(ls ~/.m2/repository/org/eclipse/dash/org.eclipse.dash.licenses/0.0.1-SNAPSHOT/org.eclipse.dash.licenses-*.jar | tail -n 1)
        npmArgs=" --no-bin-links --ignore-scripts"
        dashArgs="-excludeSources local -summary $savePWD/target/dash/npm-deps-summary"
        exitStatus=0
        if [ ${{ env.request-review }} ]; then 
          # Add "-project <Project Name> -token <Token>" here when a review is required
          dashArgs="$dashArgs -review -project $projectId -token $gitlabAPIToken" 
        fi
        #
        # Check NPM dependency licenses in main WildWebDeveloper project 
        #
        echo ""
        echo "------ Checking project [org.eclipse.wildwebdeveloper] ------"
        java -jar $dashLicenseToolJar $dashArgs org.eclipse.wildwebdeveloper/package-lock.json
        currentStatus=$?
        if [[ $currentStatus != 0 ]]; then
          exitStatus=$(($exitStatus + $currentStatus)) # Save for future
        fi
        #
        # Check NPM dependency licenses in WildWebDeveloper JUnit test projects 
        #
        for p in $(find */ -print | grep org.eclipse.wildwebdeveloper.tests | grep -wv node_modules | grep -wv target | grep package.json)
        do 
          projectPath="${p%%/package.json*}"      # remove prefix '/package.json'
          projectName="${projectPath##*/}"        # remove longest prefix `*/`
          
          echo ""
          echo "------ Checking project [$projectPath] ------"
          echo "Project path: ${projectPath}"
          echo "Project name: $projectName"
          echo "Installing: $projectPath/$projectName/package-lock.json"
          
          echo "Executing: npm install $npmArgs"
          cd $savePWD/$projectPath
          npm install $npmArgs
          
          cd $savePWD
          echo "Verifying: $projectPath/package-lock.json"
          echo "Executing: java -jar $dashLicenseToolJar $dashArgs $projectPath/package-lock.json"
          java -jar $dashLicenseToolJar $dashArgs $projectPath/package-lock.json
          currentStatus=$?
          if [[ $currentStatus != 0 ]]; then
            exitStatus=$(($exitStatus + $currentStatus)) # Save for future
          fi
        done
        cd $savePWD
        if [ ${{ env.request-review }} ]; then 
          echo ""
          if [[ $exitStatus == 0 ]]; then # All licenses are vetted
            echo "::set-output name=build-succeeded::$(echo 1)"
            echo "All licenses are vetted"
          else
            echo "::set-output name=build-succeeded::$(echo 0)"
            echo "Some contents requires a review"
          fi
        else
          if [[ $exitStatus != 0 ]]; then
            echo "::set-output name=build-succeeded::$(echo 0)"
            echo ""
            echo "Committers can request a review by commenting '/request-license-review'"
            echo ""
            echo "Dash License Tool review summary:"
            cat $savePWD/target/dash/npm-deps-summary
            exit 1
          fi
        fi
